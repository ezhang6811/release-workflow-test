name: Test Post-Release - Merge to Main

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number (e.g., 1.0.1)'
        required: true
        default: '1.1.0'
      is_patch:
        description: 'Is this a patch release? (true or false)'
        required: true
        default: 'false'

permissions:
  contents: write
  pull-requests: write

jobs:
  test-post-release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0
          
      - name: Setup variables
        run: |
          VERSION="${{ github.event.inputs.version }}"
          MAJOR_MINOR=$(echo $VERSION | sed -E 's/([0-9]+\.[0-9]+)\.[0-9]+/\1/')
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "MAJOR_MINOR=$MAJOR_MINOR" >> $GITHUB_ENV
          
      - name: Show main CHANGELOG before merge
        run: |
          echo "=== MAIN CHANGELOG BEFORE MERGE ==="
          cat CHANGELOG.md
          
      - name: Checkout from release branch and create merge branch
        run: |
          # Configure git
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          
          RELEASE_BRANCH="release/v${MAJOR_MINOR}.x"
          
          # Now checkout from release branch
          git fetch origin $RELEASE_BRANCH
          git checkout -b "post-release-${VERSION}" origin/$RELEASE_BRANCH

          echo "=== RELEASE BRANCH CHANGELOG BEFORE MERGE ==="
          cat CHANGELOG.md
          
          # Only merge unreleased content for patch releases
          if [[ "${{ github.event.inputs.is_patch }}" == "true" ]]; then
            echo "=== PATCH RELEASE: MERGING UNRELEASED CONTENT ==="
            
            git fetch origin main
            git show origin/main:CHANGELOG.md | sed -n '/## Unreleased/,/^## v[0-9]/p' | sed '$d' | tail -n +2 | sed '/^$/d' > /tmp/unreleased_content.txt
            
            echo "=== MAIN BRANCH UNRELEASED CONTENT ==="
            cat /tmp/unreleased_content.txt
             
            # Insert the content right after the existing "## Unreleased" header
            sed -i '/## Unreleased/r /tmp/unreleased_content.txt' CHANGELOG.md

            git add CHANGELOG.md
            git commit -m "Merge unreleased changes from main for post-release ${VERSION}"
          else
            echo "=== NON-PATCH RELEASE: EXTRACTING UNRELEASED COMMITS UP TO VERSION COMMIT ==="

            # Get the first commit under the specific version number
            FIRST_VERSION_COMMIT=$(sed -n "/^## v${VERSION}/,/^## v[0-9]/p" CHANGELOG.md | sed '$d' | tail -n +3 | head -n 1)
            echo "First commit under v${VERSION}: $FIRST_VERSION_COMMIT"
            
            git fetch origin main
            
            # Get all unreleased commits from main
            git show origin/main:CHANGELOG.md | sed -n '/## Unreleased/,/^## v[0-9]/p' | tail -n +2 > /tmp/all_unreleased.txt
            
            echo "=== ALL UNRELEASED FROM MAIN ==="
            cat /tmp/all_unreleased.txt
            
            # Extract commits up to (but not including) the first version commit
            if grep -F -q -- "$FIRST_VERSION_COMMIT" /tmp/all_unreleased.txt; then
              sed "/$FIRST_VERSION_COMMIT/,\$d" /tmp/all_unreleased.txt > /tmp/new_unreleased.txt
              echo "=== FOUND BOUNDARY COMMIT, EXTRACTED BEFORE IT ==="
            else
              # If not found, take all unreleased commits
              cat /tmp/all_unreleased.txt | sed '/^$/d' > /tmp/new_unreleased.txt
              echo "=== BOUNDARY COMMIT NOT FOUND, TAKING ALL ==="
            fi
            
            echo "=== NEW UNRELEASED COMMITS TO ADD ==="
            cat /tmp/new_unreleased.txt
            
            # Insert under Unreleased header
            sed -i '/## Unreleased/r /tmp/new_unreleased.txt' CHANGELOG.md
            
            git add CHANGELOG.md
            git commit -m "Add new unreleased changes for post-release ${VERSION}"

            # Merge main but always keep our CHANGELOG
            echo "=== MERGING MAIN WITH OURS STRATEGY ==="
            git fetch origin main
            git merge origin/main --no-edit -X ours
          fi
        
          git push origin "post-release-${VERSION}"
          
      - name: Create PR against main
        run: |
          gh pr create --title "Test Post-release: Prepare main for next dev cycle after ${VERSION}" \
                       --body "This PR prepares the main branch for the next development cycle after version ${VERSION}.
          
          This is a test of the post-release workflow." \
                       --head post-release-${{ github.event.inputs.version }} \
                       --base main
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Show final state
        run: |
          echo "=== FINAL CHANGELOG STATE ==="
          cat CHANGELOG.md
          echo "=== CURRENT BRANCH ==="
          git branch --show-current
          echo ""
          echo "This branch will be merged back to main via PR"
